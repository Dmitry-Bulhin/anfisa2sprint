Вот несложный запрос на SQL: получить те записи, у которых значение поля id — строго больше пяти.
SELECT *
FROM ice_cream_icecream
WHERE id > 5; 
В Django ORM этот запрос будет выглядеть так: 
IceCream.objects.filter(id__gt=5)
# <Модель>.objects.filter(<свойство>__<модификатор>=<значение>) 



Модификаторы сравнения

В Django ORM модификаторы выполняют роль операторов, используемых в SQL для фильтрации выборки по значениям полей. Вот как переводятся самые востребованные модификаторы (перед модификатором обязательно ставится двойной символ подчёркивания):
Значение оператора	SQL	ORM
Равно	=	__exact
Сравнение с NULL	IS NULL	__exact=None
Больше	>	__gt
Больше или равно	>=	__gte
Меньше	<	__lt
Меньше или равно	<=	__lte
Поиск по тексту	LIKE '%фраза%'	__contains='фраза'
Вхождение в множество	IN (1, 3, 4)	__in=[1, 3, 4]
Вхождение в диапазон	BETWEEN 1 AND 4	__range=[1, 4]
Полный список модификаторов есть в документации Django.




Метод .filter()

возвращает QuerySet с объектами, которые соответствуют заданным условиям.
<Модель>.objects.filter(<свойство>__<модификатор>=<значение для фильтрации>) 
Например, такой SQL-запрос… 

SELECT *
FROM ice_cream_icecream
WHERE title LIKE '%эскимо%'; 

…в Django ORM записывается так: 

IceCream.objects.filter(title__contains='эскимо')  




IceCream.objects.filter(is_on_main__exact=True)
~~~~# Модификатор __exact используется по умолчанию,
# можно его не указывать.
# Так тоже сработает:
# IceCream.objects.filter(is_on_main=True)

# Оба варианта приведут к одинаковому результату, 
# но второй читается проще, поэтому так все и пишут. 
Разместим этот вызов во view-функции index():
# homepage/views.py


from django.shortcuts import render
from ice_cream.models import IceCream

def index(request):
    template_name = 'homepage/index.html'
    # Заключаем вызов методов в скобки
    # (это стандартный способ переноса длинных строк в Python);
    # каждый вызов пишем с новой строки, так проще читать код:
    ice_cream_list = IceCream.objects.values(
            'id', 'title', 'description'
        # Верни только те объекты, у которых в поле is_on_main указано True:
        ).filter(is_on_main=True)
    context = {
        'ice_cream_list': ice_cream_list,
    }
    return render(request, template_name, context) 




    Метод exclude()

Для исключения объектов, соответствующих определённому условию, применяют метод 
 .exclude(); в SQL ему соответствует комбинация операторов WHERE NOT ...:

<Модель>.objects.exclude(<свойство>__<модификатор>=<значение для фильтрации>) 


Через метод .exclude() настроим запрос так, чтобы в QuerySet не попали те 
записи, у которых в поле is_published стоит False:
...

def index(request):
    template_name = 'homepage/index.html'
    ice_cream_list = IceCream.objects.values(
            'id', 'title', 'description'
        # Исключи те объекты, у которых is_published=False:
        ).exclude(is_published=False)
    context = {
        'ice_cream_list': ice_cream_list,
    }
    return render(request, template_name, context) 

Теперь для формирования главной страницы будет отправляться такой запрос 
(с двойным отрицанием):

SELECT "ice_cream_icecream"."id",
       "ice_cream_icecream"."title",
       "ice_cream_icecream"."description"
FROM "ice_cream_icecream"
WHERE (NOT (NOT "ice_cream_icecream"."is_published")) 




Работа с датами

Для работы с датами применяются специальные модификаторы. 
Предположим, в каком-нибудь проекте блога есть модель Pоst (публикация) и одно из полей этой модели — дата публикации.
class Post(models.Model):
    pub_date = models.DateTimeField('Дата публикации')
    ... 




    Получим публикации, созданные в диапазоне с 1 января 1890 до 31 марта 1895 (нашему блогу почти полтора века!):
import datetime

...

def filtered_date(request):
    ...    
    start_date = datetime.date(1890, 1, 1)
    end_date = datetime.date(1895, 3, 31)
    Post.objects.filter(pub_date__range=(start_date, end_date))
    # SQL-версия запроса: WHERE pub_date BETWEEN '1890-01-01' AND '1895-03-31';
    return render(request, template_name, context) 


    Для таких запросов в Django ORM применяют дополнительные суффиксы 
    __date, __year, __month, __day, __week, __week_day, __quarter:
# Условия для конкретной даты:
Post.objects.filter(pub_date__date=datetime.date(1890, 1, 1))
# Ранее первого января 1895 года:
Post.objects.filter(pub_date__date__lt=datetime.date(1895, 1, 1))
# В конкретный год:
Post.objects.filter(pub_date__year=1890)
# В любой год с января по июнь включительно:
Post.objects.filter(pub_date__month__lte=6)
# В первый квартал любого года:
Post.objects.filter(pub_date__quarter=1) 