Сортировка через класс Meta в модели

Если сортировать объекты модели планируется одинаково при всех запросах — 
порядок сортировки можно объявить прямо в модели:
# <название_приложения>/models.py

class <Модель>(models.Model):
    ...

    class Meta:
        ordering = ('<название_поля>',) 

При таких настройках модели в SQL-запросы будет добавлена инструкция ORDER BY:
ORDER BY "<таблица>"."<название_поля>" ASC 


Чтобы поменять порядок сортировки и упорядочить объекты от больших значений к 
меньшим — достаточно поставить символ «минус» - перед названием поля, по 
которому проводится сортировка:
ordering = ('-<название_поля>',) 
# SQL-запрос: ORDER BY <название_поля> DESC 


Можно отсортировать и по нескольким полям:
ordering = ('<название_поля_1>', '<название_поля_2>')  




Метод .order_by()

Порядок сортировки можно указать и в конкретном запросе; для этого у objects 
есть метод  .order_by():
<Модель>.objects.order_by('<название_поля>') 


Если правила сортировки указаны одновременно в Meta и в objects.order_by() — 
будут применены правила из objects.order_by(). Такое «переопределение» 
сортировки применяют, если в большинстве случаев при работе с моделью нужен 
один принцип сортировки (его можно указать в Meta), а в каком-то частном случае 
требуется иная сортировка (её указывают в objects.order_by()). 


Сортировку, установленную в Meta, в каких-то запросах можно и вовсе отключить — 
для этого нужно вызвать метод objects.order_by() без параметров. Сортировка 
увеличивает время запроса, и если в каком-то случае она не требуется — есть 
смысл её отключить.

Метод .order_by() может сортировать и по нескольким полям:
<Модель>.objects.order_by('<название_поля_1>', '<название_поля_2>') 
В этом случае сортировка будет производиться по первому полю, а если окажется, 
что у каких-то объектов значения этого поля равны — сортировка будет выполнена 
по второму полю.



# homepage/views.py

from django.shortcuts import render

from ice_cream.models import Category, IceCream

def index(request):
    template_name = 'homepage/index.html'
    # ice_cream_list = (
    #     IceCream.objects.values('id', 'title', 'description')
    #     .filter(is_on_main=True)
    # )
    categories = Category.objects.values(
        'id', 'output_order', 'title'
    ).order_by(
        # Сортируем записи по значению поля output_order,
        # а если значения output_order у каких-то записей равны -
        # сортируем эти записи по названию в алфавитном порядке.
        'output_order', 'title'
    )
    context = {
        # 'ice_cream_list': ice_cream_list,
        'categories': categories
    }
    return render(request, template_name, context)



Если вывести данные в шаблон…
...

{% for category in categories %}  
  <p>ID: {{ category.id }}</p>
  <p>{{ category.output_order }}</p>
  <p>{{ category.title }}</p>  
{% endfor %}

... 





Ограничение и сдвиг выборки: LIMIT, OFFSET

Ограничим число возвращаемых объектов до трёх:



При создании SQL-запроса конструкция [1:4] преобразуется в 

LIMIT 3 -- Количество записей. Разница между первым и вторым значениями (4 - 1) 
OFFSET 1 -- На сколько элементов сдвинуть выборку - первое значение в срезе (1)



В SQL получится такой запрос:
SELECT "ice_cream_icecream"."id",
       "ice_cream_icecream"."title",
       "ice_cream_icecream"."description"
FROM "ice_cream_icecream"
WHERE ("ice_cream_icecream"."is_on_main" 
       AND "ice_cream_icecream"."is_published")
ORDER BY "ice_cream_icecream"."title" ASC
LIMIT 3
OFFSET 1 