Активируйте виртуальное окружение проекта «Анфиса для друзей» и выполните команду
python manage.py createsuperuser 

После этого система запросит имя для нового пользователя, адрес его почты и пароль:
# Придумайте логин (например, своё имя на латинице).
Username (leave blank to use 'user'):  
Email address:  # Укажите почту.
Password:  # Придумайте пароль (введённые символы отображаться не будут).
Password (again):  # Повторите пароль.
Superuser created successfully. 

Под этой учётной записью вы сможете войти в админку и управлять проектом. Если вы забудете пароль — можно поменять его через консоль python manage.py changepassword <user_name>, а можно просто создать нового суперпользователя.


Добро пожаловать в админ-зону!

Запустите в активированном окружении сайт командой: python manage.py runserver
Откройте в браузере страницу авторизации — http://127.0.0.1:8000/admin/



Добавление моделей в админ-панель
<имя_приложения>/admin.py
Добавим модель Category в интерфейс админ-зоны; для этого надо зарегистрировать модель в файле ice_cream/admin.py.

Чтобы переключить интерфейс админки на другой язык, надо найти кодовое обозначение нужного языка и подставить его в константу LANGUAGE_CODE в файле settings.py:
# anfisa_for_friends/settings.py

# Переводим на русский!
LANGUAGE_CODE = 'ru-RU' 



Verbose name: переводим названия приложения и моделей

Задать название приложения в том виде, как оно должно отображаться в интерфейсах Django, можно в файле apps.py.
Добавьте в класс IceCreamConfig свойство verbose_name со значением 'Каталог мороженого'; сохраните файл, обновите страницу админ-зоны: название раздела в админке изменится. 
# ice_cream/apps.py
from django.apps import AppConfig

class IceCreamConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ice_cream'
    # Добавить строчку:
    verbose_name = 'Каталог мороженого' 




Переводим название модели

Название модели, которое будет отображаться в админке, нужно указать в классе Meta этой модели. 
Понадобится добавить два свойства:
verbose_name — расширенное название,
verbose_name_plural — расширенное название во множественном числе.
# ice_cream/models.py
...

class Category(PublishedModel):
    title = models.CharField(max_length=256)
    slug = models.SlugField(max_length=64, unique=True)
    output_order = models.PositiveSmallIntegerField(default=100)

    class Meta:
        verbose_name = 'категория'
        verbose_name_plural = 'Категории' 




        В админ-зоне заголовки полей ввода генерируются из названий атрибутов модели и выглядят они непонятно; лучше дать этим полям нормальные читаемые заголовки. В Django предусмотрена такая возможность: для каждого из атрибутов модели можно указать аргумент verbose_name:
# ice_cream/models.py
...

class Category(PublishedModel):
    title = models.CharField(max_length=256, verbose_name='Название')
    slug = models.SlugField(max_length=64, unique=True, verbose_name='Слаг')
    output_order = models.PositiveSmallIntegerField(
        default=100,
        verbose_name='Порядок отображения'
    )  


    Хозяйке на заметку

После добавления/изменения verbose_name и атрибутов класса Meta стоит создать и
 применить миграции. Несмотря на то, что Django создаёт в этом случае новые 
 миграции, физически структура БД не меняется.




 Предварительные настройки

 По умолчанию настройки админ-зоны описаны в классе ModelAdmin приложения admin. Чтобы изменить интерфейс админки — следует переопределить дефолтные настройки этого класса. Для этого нужно:
Создать собственный класс, унаследовав его от admin.ModelAdmin
Зарегистрировать этот новый класс как источник настроек админ-зоны
В унаследованном классе переопределить настройки интерфейса админки
Админ-зона настраивается отдельно для каждой модели. Настроим интерфейс для модели IceCream.

Всё нужное на одной странице

Начнём с отображения полей в разделе «Мороженое»: в списке сортов мороженого для каждой записи выведем все её поля, а не только название.
В классе IceCreamAdmin можно указать:
какие поля будут показаны на странице списка объектов (свойство list_display, это кортеж);
какие поля можно редактировать прямо на странице списка объектов (свойство list_editable, кортеж);
search_fields — кортеж с перечнем полей, по которым будет проводиться поиск. Форма поиска отображается над списком элементов.
list_filter — кортеж с полями, по которым можно фильтровать записи. Фильтры отобразятся справа от списка элементов.
В кортеже list_display_links указывают поля, при клике на которые можно перейти на страницу просмотра и редактирования записи. По умолчанию такой ссылкой служит первое отображаемое поле.
# ice_cream/admin.py
...

class IceCreamAdmin(admin.ModelAdmin):
    list_display = (
        'title',
        'description',
        'is_published',
        'is_on_main',
        'category',
        'wrapper'
    )
    list_editable = (
        'is_published',
        'is_on_main',
        'category'
    )    
    search_fields = ('title',) 
    list_filter = ('category',)
    list_display_links = ('title',)

# Регистрируем кастомное представление админ-зоны
admin.site.register(IceCream, IceCreamAdmin)

... 



Пустое поле

Выглядит не очень хорошо: вместо дефиса лучше бы выводить какое-нибудь пояснение. Для этого нужно переопределить свойство empty_value_display в модели IceCreamAdmin:
# ice_cream/admin.py
...

class IceCreamAdmin(admin.ModelAdmin):
    ...
    # Это свойство сработает для всех полей этой модели.
    # Вместо пустого значения будет выводиться строка "Не задано".
    empty_value_display = 'Не задано'
... 


Переопределить отображение пустых полей можно и на уровне приложения — тогда во всех моделях приложения пустые поля будут отображаться одинаково:
# ice_cream/admin.py
from django.contrib import admin

from .models import Category, IceCream, Topping, Wrapper

...
# Этот вариант сработает для всех моделей приложения.
# Вместо пустого значения в админке будет отображена строка "Не задано".
admin.site.empty_value_display = 'Не задано' 




Интерфейс для управления записями, связанными «многие ко многим»

Модели IceCream и Topping связаны как «многие ко многим». Чтобы привязать к мороженому один или несколько топпингов — штатная админка Django предлагает выбрать нужные топпинги из списка, кликая по ним при нажатой кнопке Ctrl (на Windows) или Command (на macOS). Для небольшого списка топпингов такой интерфейс хорош, но если в базе их больше десятка — администратор намучается.

# ice_cream/admin.py
...

class IceCreamAdmin(admin.ModelAdmin):
    ...
    # Указываем, для каких связанных моделей нужно включить такой интерфейс:
    filter_horizontal = ('toppings',)
... 


Все связанные записи на одной странице

Такие блоки называют «вставки», для их настройки в Django есть классы admin.TabularInline и admin.StackedInline. Разница между этими классами заключается лишь в способе отображения связанных записей: TabularInline отображает поля вставки в строку, а StackedInline — столбцом, одно под другим.
Подключим вставку сортов мороженого на страницу категории:
# ice_cream/admin.py
...

# Подготавливаем модель IceCream для вставки на страницу другой модели.
class IceCreamInline(admin.StackedInline):
    model = IceCream
    extra = 0

class CategoryAdmin(admin.ModelAdmin):
    inlines = (
        IceCreamInline,
    )
    list_display = (
        'title',        
    )

admin.site.register(Category, CategoryAdmin) 

Поменяйте в ice_cream/admin.py класс admin.StackedInline на admin.TabularInline;
посмотрите, как изменится интерфейс: поля сортов мороженого на странице
категории встанут в строку; интерфейс получится компактнее.
Поле extra отвечает за количество пустых форм в конце




Подсказки для полей модели

Добавим финальный штрих — под названиями полей выведем подсказки, описывающие, какое содержимое ожидается в этом поле. Подсказка указывается в поле модели, в именованном аргументе help_text:
# ice_cream/models.py
class Wrapper(PublishedModel):
    title = models.CharField(
        'Название',
        max_length=256,
        help_text='Уникальное название обёртки, не более 256 символов'
    )

    class Meta:        
        verbose_name = 'обёртка'  
        verbose_name_plural = 'Обёртки'

    def __str__(self):
        return self.title 
